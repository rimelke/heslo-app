diff --git a/node_modules/react-native-opaque/android/CMakeLists.txt b/node_modules/react-native-opaque/android/CMakeLists.txt
index c5dfff7..ec601ef 100644
--- a/node_modules/react-native-opaque/android/CMakeLists.txt
+++ b/node_modules/react-native-opaque/android/CMakeLists.txt
@@ -2,20 +2,21 @@ cmake_minimum_required(VERSION 3.4.1)
 
 set (CMAKE_VERBOSE_MAKEFILE ON)
 set (CMAKE_CXX_STANDARD 11)
+set (NODE_MODULES_DIR ${CMAKE_CURRENT_LIST_DIR}/../..)
 
 # add directories to "include" search paths
 include_directories(
             ../cpp
-            ../node_modules/react-native/React
-            ../node_modules/react-native/React/Base
-            ../node_modules/react-native/ReactCommon/jsi
+            "${NODE_MODULES_DIR}/react-native/React"
+            "${NODE_MODULES_DIR}/react-native/React/Base"
+            "${NODE_MODULES_DIR}/react-native/ReactCommon/jsi"
 )
 
 # here we define a library target called "opaque"
 # which will be built from the listed source files
 add_library(opaque
   SHARED
-  ../node_modules/react-native/ReactCommon/jsi/jsi/jsi.cpp
+  "${NODE_MODULES_DIR}/react-native/ReactCommon/jsi/jsi/jsi.cpp"
   ../cpp/react-native-opaque.cpp
   ../cpp/react-native-opaque.h
   ../cpp/opaque-rust.h
diff --git a/node_modules/react-native-opaque/cpp/opaque-rust.cpp b/node_modules/react-native-opaque/cpp/opaque-rust.cpp
index e4034e5..7f3301b 100644
--- a/node_modules/react-native-opaque/cpp/opaque-rust.cpp
+++ b/node_modules/react-native-opaque/cpp/opaque-rust.cpp
@@ -1010,10 +1010,10 @@ void cxxbridge1$opaque_create_server_setup(::rust::String *return$) noexcept;
 
 ::rust::String opaque_get_server_public_key(::rust::String data) {
   ::rust::MaybeUninit<::rust::String> return$;
-  ::rust::repr::PtrLen error$ = cxxbridge1$opaque_get_server_public_key(&data, &return$.value);
-  if (error$.ptr) {
-    throw ::rust::impl<::rust::Error>::error(error$);
-  }
+  // ::rust::repr::PtrLen error$ = cxxbridge1$opaque_get_server_public_key(&data, &return$.value);
+  // if (error$.ptr) {
+  //   throw ::rust::impl<::rust::Error>::error(error$);
+  // }
   return ::std::move(return$.value);
 }
 
